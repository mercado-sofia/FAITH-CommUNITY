{
  "demo_descriptions": [
    "The DatePanel & DatePanel Position is disabled by default and is activated when you switch to multiple or range mode & the number of months is 1 (of course, these are the current settings that I applied, you can activate them in any cases).",
    "In Multiple or Range Picker modes, 'Only Time Picker' is disabled.",
    "On this page, the number of months is limited to a maximum of 3, but you can consider any number for it.",
    "First Day Of Week is disabled in Only Time Picker, Only Year Picker & Only Month Picker",
    "Number Of Months is disabled in Only Time Picker, Only Analog Time Picker, Only Month Picker & Only Year Picker",
    "Calendar position and animation are activated when the type is anything other than Calendar (input, button, ...)."
  ],
  "Fa": "Farsi",
  "Ar": "Arabic",
  "fa": "farsi",
  "ar": "arabic",
  "hi": "hindi",
  "persian": "solar hijri",
  "arabic": "islamic hijri",
  "npm_description": "",
  "yarn_description": "",
  "import_datepicker": "DatePicker",
  "import_calendar": "Calendar",
  "important_note_description_part_1": "I wrote this component in a way the user could be able to use it with or without the state.",
  "important_note_description_part_2": "If you want to submit the user-selected dates directly without modification or you don't want to define an initial value, you can use this component without storing dates in the state.",
  "important_note_description_part_3": "Example of using DatePicker without the state :",
  "important_note_description_part_4": "But If you want to modify the selected dates or you have an initial value, you need to use an external state and store the user-selected dates after modifying them in onChange function using setState.",
  "important_note_code_comment_1": "your modification on passed value ....",
  "important_note_description_part_5": "The initial value can be Date, DateObject, Number, or String, but as soon as the user selects a new date, its Type changes to DateObject.",
  "important_note_description_part_6": "So in your submission form, if you want to convert the user-selected date to JavaScript Date, you can easily use the toDate() method.",
  "important_note_description_part_7": "The point that needs to be mentioned about the toDate method is that if you defined an initial value with a type of something other than DateObject and the form submission is done before the user selects a new date, then it means that your initial value still has not been converted to DateObject. so it is better to add a condition like the following in your submission event:",
  "important_note_description_part_8": "If the value you enter to date picker or calendar is String and the format of the string is different from the default format (YYYY/MM/DD hh:mm:ss a), the format of that String must match the format you entered into the date picker. otherwise, the wrong date may be parse.",
  "important_note_description_part_9": "For example, if you consider 05/18/2020 02:20:36 as a value, the format you enter in the datepicker or calendar should also be as follows: MM/DD/YYYY HH:mm:ss",
  "dateobject": [
    "This package is using DateObject to convert, parse, and format date. click <a href='/react-multi-date-picker/date-object' target='_blank'>here</a> to see how it works.",
    "<p style='color:red'>*Using DateObject as value is optional. You can ignore it.</p>",
    "to see more information about DateObject please click <a target='__blanck' href='https://github.com/shahabyazdi/react-date-object/'>here.</a>"
  ],
  "typescript": [
    "As mentioned in the previous section, the initial value can be Date, DateObject, Number, or String, but as soon as the user selects a new date, its type changes to DateObject.",
    "So, if you want to store the selected dates in the state, depending on the type of the initial value; You must add the initial value type plus DateObject and Dateobject[] type, to useState:"
  ],
  "calendars": "",
  "locales": "",
  "calendar_descriptions": "As you can see in the examples below, you can use any of these properties, either in DatePicker or Calendar:",
  "default_calendar": "Default Calendar",
  "calendar_example_persian": "Persian calendar with Farsi locale",
  "persian_datepicker_description": "The default calendarPosition is bottom-left, so on pages with a right to left direction, you can set the calendarPosition to bottom-right, for getting better results.",
  "calendar_example_arabic": "Arabic calendar with Arabic locale",
  "calendar_example_indian": "Indian calendar with Indian locale",
  "calendar_example_datepicker": "Persian datepicker with English locale",
  "multiple_mode": [
    "To enable multiple mode, you must set the multiple prop to true.",
    "Just remember that in multiple mode and in the onChange method, instead of a specific date, you get an array of dates. if you have initial values, put them in the array.",
    "In this example, I put today and tomorrow in the array as an initial value."
  ],
  "multiple_sort_example": "In this example, dates with different types are considered as an initial value and sorted using the sort prop.",
  "multiple_sort_comment": "unix time in milliseconds (August 21 2020)",
  "date_panel_description": [
    "If you want to enable multiple or range mode, you can also use the DatePanel plugin to have a list of dates.",
    "To view the list of dates, you must import the DatePanel plugin:"
  ],
  "range_mode": "",
  "date_panel_range": "",
  "each_days_in_range": [
    "As you can see in the example above, in range mode, only the start and end dates are displayed in the date panel.",
    "But if you want to see every single date between the start and end date in the date panel, you can use the <b>eachDaysInRange</b> Prop.",
    "Similarly, in onChange, only the start and end dates are given, and if you want to have separate dates between the start and end dates, you can use the getAllDatesInRange function.",
    "Just keep in mind that enabling eachDaysInRange property in large ranges of dates may cause <b style='color:red'>slow rendering</b>, so it's a good idea to limit your DatePicker with minDate and maxDate.",
    "In the example below, the DatePicker is limited to the beginning and end of the current month."
  ],
  "multiple_months": [
    "Use numberOfMonths prop to set the number of months you want to display in the calendar.",
    "This feature can be applied to datepicker or calendar in all single, multiple, and range modes.",
    "Using disableMonthPicker and disableYearPicker is optional."
  ],
  "multiple_mode_description": "",
  "on_open": [
    "If you have a specific condition for opening or closing the calendar, you can use onOpen and onClose events.",
    "If you return false in onOpen, the calendar will not open. Also, if you return false in onClose, the calendar will not close. "
  ],
  "on_position_change": [
    "Each time the popper(calendar) position is recalculated, the onChange function is executed in the element-popper.",
    "Because onChange does something else in datepicker, I changed its name to onPositionChange here.",
    "The function you enter in onPositionChange is executed when scrolling, resizing, opening the calendar, or when you call refreshPosition from datepicker ref.",
    "In the onPositionChange function, an object is sent as an argument containing the calculated popper(calendar) and arrow positions, as well as scrollable date picker parent elements.",
    "In this example, the mentioned object is logged in the console and you can view it by opening your browser console (Ctrl + Shift + i, in Chrome browser). "
  ],
  "min_max": [
    "Type of min & max dates can be Date, DateObject, String, or Number.",
    "Here are some examples:"
  ],
  "on_change": [
    "The difference between onChange in this package and others is that type of its argument is sent as DateObject instead of Date.",
    "You can easily convert it to Date with the toDate() method."
  ],
  "weekday": "The following 4 examples are used in case you want the names of months or weekdays to be displayed only in the calendar.",
  "months": "Like the two examples above, you can enter your own values to display as the names of the months:",
  "months_2": "Instead of typing short names of months, you can extract them from the DateObject:",
  "locale": [
    "Follow the example below to see the custom names in Datepicker input. (this option is only available for DatePicker).",
    "*format, formattingIgnoreList, and style are optional."
  ],
  "custom_input": [
    "Use <b>onChange</b> if you want to see changes in the calendar as the input value changes.",
    "<b>Node</b>: In versions before 4, you should use <b>onValueChange</b> prop instead of onChange."
  ],
  "multiple_range": [
    "At version 1.8.1 and in multiple and range mode, an array of stringDates are sent instead of stringDate.",
    "So to get the input value in versions >= 1.8.1, you can follow the below examples."
  ],
  "multiple_range_v3": "In multiple and range mode, the value is sent with the type of Array (string[])",
  "map_days_description_1": "You can customize your calendar days with the mapDays Prop and create different properties for each of them by returning the Props you want.",
  "map_days_description_2": "In general, this is how it works :",
  "map_days_description_3": "The object which is received as an argument, contains following properties :",
  "map_days_description_4": "The Date is being rendered",
  "map_days_description_5": "according to the calendar mode (single, multiple, or range), the type of selected date can be a DateObject or Array of DateObjects",
  "map_days_description_6": "the month that the user has selected and is displayed in the calendars header. <span style='color:red'>(it can be different from the month of selected date)</span>",
  "map_days_description_7": "it returns the comparison between the day, month, and year of two DateObjects.",
  "map_days_description_8": "As you know you can destructure the received object and pick each property that you want as follows :",
  "map_days_description_9": "*Please note that none of the properties inside the object should be changed, as this will cause the calendar to malfunction.",
  "map_days_description_10": "For example, if we change the day of all the rendering dates to today, it will result in an unpleasant outcome.",
  "map_days_description_11": "The Props you return can contain all the Props that a span element accepts, plus two other properties that I have added to them, which are:",
  "map_days_description_12": "Here are some examples of things that can be performed using mapDays:",
  "map_days_weekends": "For convenience, the 'highlight highlight-red' class is included in CSS files, so you do not need to import it.",
  "map_days_title": "In the example below the title has been added to today, yesterday and tomorrow.",
  "calendar_position_description": [
    "I have to say that adjusting the position of the calendar in the datepicker involved me so much that I had to write a <a href='https://github.com/shahabyazdi/react-element-popper' target='_blank'>separate package</a> for it! But I still can not claim that it works 100%, if you have a problem with the calendar position, you can open an issue <a href='https://github.com/shahabyazdi/react-element-popper/issues' target='_blank'>here</a>.",
    "In the early versions, I used the relative position for the datepicker container, which is easy and does not require calculations, but gradually it became clear that the relative position doesn't work, it may be suitable for some layouts, but it doesn't work for complex layouts.",
    "For this reason, in later versions, I changed the position of the container to static, trying to determine the position of the calendar with JavaScript calculations. Computations became more and more complicated and I finally decided to transfer them all to Element Popper package so that it could be used in other projects as well."
  ],
  "calendar_position": [
    "The way of specifying the position of the calendar is that you have to define the two main and relative positions as 'main position-relative position' for the datepicker, the main position has been defined to specify where the calendar should be placed, which You can consider four up, down, left and right values. The relative position is also used to determine where the calendar should be in the main position. Which itself consists of three parts: start, center, and end.",
    "there are all the values you can define for a datepicker as position below:"
  ],
  "important_points": [
    "The most important thing is that this package only tries to be in the position you specified! This is because the arrangement of the elements containing the date picker may be such that the calendar does not fit in that position, or the user may start scrolling or resizing the page, in which case the calendar position will change. Of course, you can force the date picker to show the calendar position exactly where you want it, in which case you should use the fixMainPosition and fixRelativePosition properties.",
    "Do not use margins and padding to create a space between the calendar and the input, and instead use the offsetY and offsetX properties.",
    "As I said in the descriptions, the relative position doesn't work, so do not try to change the datepicker container position to a relative with CSS or Style, because it will disrupt the calculations.",
    "Set the fixMainPosition to true to fix the main position and the fixRelativePosition to true to fix the relative position.",
    "The default position of the calendar is optimized for the left-to-right direction and its value is bottom-left, so for right-to-left directions that are used in Persian and Arabic languages, you need to use the bottom-right position.",
    "If you want to change the size of the input, please set the box-sizing of the input to border-box.",
    "If the date picker is inside the container with flex position, and flex-direction is column (like the example below), it is better to define the width for datepicker container.",
    "The offsetY value is applied when the main position is top or bottom, and the offsetX value is applied when the main position is left or right."
  ],
  "input_class": [
    "Default <b>input</b> className : <b>rmdp-input</b>",
    "Default <b>button</b> className : <b>rmdp-button</b>"
  ],
  "input_class_note": "Note that when you enter a new className, the default className is automatically removed.",
  "calendar_class": [
    "Remember that any value you enter as className, will be entered in the arrow at the same time.",
    "since the calendar class is .rmdp-wrapper, use the .rmdp-wrapper.YOUR_CLASSNAME selector in CSS file so that the class you apply to the calendar does not interfere with the arrow."
  ],
  "rmdp_meaning": "<b>rmdp</b> stands for react multi date picker. ",
  "ep_meaning": "<b>ep</b> stands for element popper. ",
  "container_style": "Because the display value of the DatePicker Container is inline-block, in case you want to change the width of the input, it is necessary to change the width of the datepicker container as well.",
  "arrow_description": "The arrow property in this date picker is designed in such a way that its value can be entered as Boolean or React Element.",
  "disable_arrow": "To disable the arrow, set the arrow value to false. ",
  "custom_arrow": "Instead of using the default arrow, you can render your custom arrow in the date picker.",
  "forward_ref_description": "This package as a functional component, uses forwardRef for passing a ref through a component.",
  "date_picker_ref": [
    "The openCalendar and closeCalendar functions are added to the ref by date picker, and the refreshPosition is added to the ref by element popper.",
    "The isOpen property is also added to the ref by the datepicker.",
    "If you want to manually open and close the calendar, you can use the openCalendar and closeCalendar functions as follows."
  ],
  "refresh_position": [
    "When the calendar may be open and the input position changes, the calendar position remains constant because the element-popper does not listen to the click events.",
    "In these cases, you can use the refreshPosition function, which is located in the date picker ref."
  ],
  "another_examples": "There are two other examples that are related to the position of the calendar that you may want to see:",
  "another_examples_1": "Events #onPositionChange",
  "another_examples_2": "DatePicker & Calendar Ref #refreshPosition",
  "disable_scroll": "Using this prop sets the fixMainPosition value true while scrolling.",
  "disable_edit": "This feature only affects input in single mode.",
  "plugins": [
    "There are a few other features that I do not put them in the original datepicker file by default.",
    "This is because maybe all users don't want to use them. So there is no reason to put them in the original file and increase the main file.",
    "Another good thing about plugins is that you may want to add a feature to your datepicker that does not exist by default, so you can use this feature to add your own plugin to the date picker.",
    "<b>Above Example Code :</b>"
  ],
  "plugins_usage_description": "Plugins Prop accepts an array of plugins, which the following two properties can be applied on each of them which has entered as <strong>React Component</strong>.",
  "plugins_usage": "This is the general way to add an imported plugin component to Datepicker:",
  "date_object": [
    "The DateObject is an ES6 class that I wrote to make it easier to work with a variety of calendars, so there is no need to import a separate package into the DatePicker for each calendar.",
    "This package can be used in the backend and frontend as well.",
    "DateObject has several other options that make it much easier to work with date and time, and in this section, I want to write about some of the most useful options."
  ],
  "gregorian_1": "You need to enter 'new DateObject()' to generate an instance of DateObject. If you enter the above code without any constructor, you will get an object containing the current moment with the Gregorian calendar and English locale, for example for today, which is 03/02/2021, if I define a new DateObject(), An object of this moment will be produced for me:",
  "gregorian_2": "Now you can format your date with the format method:",
  "gregorian_3": "Also, if you have a specific token, you can enter that token as a parameter in the format method:",
  "gregorian_4": "And if you use a value inside your tokens that you want to ignore, define those values as an array in the second parameter:",
  "gregorian_5": "As you know, you can destructure this object and get the values you need from it:",
  "gregorian_6": "In the same way, you can destructure the name, shortName, number, and index, from the value of the month & weekDay.",
  "gregorian_7": "If you want to move to the beginning or end of the month, use the toFirstOfMonth() and toLastOfMonth() methods.",
  "persian_1": "If you want to generate current moment in calendars other than Gregorian, just insert an object with a calendar property equal to the calendar you want, into the DateObject constructor:",
  "string_1": "There are several ways to generate a date from a string:",
  "string_2": "You can insert that string directly into the DateObject constructor. For this purpose, you should pay attention to the following two items.",
  "string_3": "If you enter the string directly, the date will be parsed as the Gregorian calendar.",
  "string_4": "The string must be entered with the following format: <b>year month day hour minute second millisecond meridiem</b> and you can replace the spaces with any character you want.",
  "string_5": "If you want to parse a string with a specific format, you must insert that string and format, to an object, and passed it to the DateObject constructor.",
  "string_6": "If you want to parse your string on a calendar & locale other than Gregorian & English, you must add the value of that calendar & locale to your object.",
  "string_6_v3": "if you want to parse your string on a calendar & locale other than Gregorian & English, you must import that calendar & locale and add them to your object.",
  "string_7": "The important point that I am often asked about and I have to explain to you at the end, is about parsing the Gregorian date and converting it into other calendars.",
  "string_8": "Suppose you want to convert the date 2021/01/01 to the Persian (Solar Hijri) calendar, a mistake that most people make is that they parse the Gregorian string with the Persian calendar:",
  "string_9": "This is wrong because by doing this you are actually parsing the 2021 Persian date!",
  "string_10": "The correct way is to first parse the current date on its own calendar (which is Gregorian), and then convert it to the target calendar (which is Persian):",
  "string_11": "In the above case, your string will first parse as the valid Gregorian date and then it will convert to the Persian calendar. now, if you format your date, you should see the correct result:",
  "string_12": "I will explain more about the convert method in the following sections.",
  "unix_1": "If you visit <a href='https://www.unixtimestamp.com/' target='_blank'>here</a>, you can get the Unix timestamp of the current moment.",
  "unix_2": "The Unix timestamp At the moment I am writing this, is 1614678083.",
  "unix_3": "Just note that this value is in seconds and we have to multiply it by 1000 to convert it to milliseconds:",
  "unix_4": "You can also enter the value for the Gregorian calendar in this way:",
  "unix_5": "If you want to know the Unix value of each date, you must use the 'toUnix()' method. For example, for the above variable, if we use the toUnix() method, the same number will be printed for us again:",
  "convert_1": "Use the convert method to convert any calendar to other calendars.",
  "table_1": "The setMonth method in JavaScript accepts the month index, but in DateObject you have to enter the month number.",
  "table_2": "You can also use the following methods to set the amount of time in DateObject:",
  "digits": [
    "You can use the digits Prop to replace your favorite digits with the default numbers.",
    "In this example, the default digits are replaced with Thai numbers."
  ],
  "disable_buttons": "You can set the buttons prop to false, to disable the navigation buttons.",
  "custom_buttons": [
    "You can render your favorite element instead of the default buttons.",
    "For this purpose, you can do one of the following methods:"
  ],
  "disabled_buttons": "You can also get disabled value from the props ,if you have set a min or max date to limit the calendar or date picker.",
  "year_month_ref": [
    "There is a way to manually set the month and year in the Calendar which is shown in the example below.",
    "Just note that this feature only works on Calendar.",
    "Click <a href='/other-examples/#opening-calendar-on-the-specified-date' target='_blank'>here</a> to manually set the month and year in DatePicker"
  ],
  "start_day": [
    "You can use the weekStartDayIndex property to change the start day of the week.",
    "For example, if you want the start day of the week to be Monday, you should set the weekStartDayIndex value to 1.",
    "The value of weekStartDayIndex must be a number between 0 and 6."
  ],
  "on_props_change": [
    "This feature is suitable for plugins.",
    "Because for some of them, setting the DatePicker props (parent component) from the plugins (child component) is inevitable."
  ],
  "on_month_change": [
    "In this example, setting the currentDate property is optional.",
    "The currentDate property is set to open the calendar in the same selected month."
  ],
  "on_year_change": [
    "like the onMonthChange, a date with the type of DateObject is sent as an argument in onYearChange function.",
    "For example you can use the onYearChange and onMonthChange Props, if you want to implement a DatePicker in which the month and year of the user-selected date changes by changing the month and year of the calendar."
  ],
  "range_picker_footer": "This plugin is developed specifically for the Range Picker and does not work properly in other modes.",
  "time_picker": [
    "If you have upgraded from previous versions to version 2.6.0, you must have noticed the warning displayed on the console when using the internal time picker.",
    "Internal TimePicker is going to be removed from version 3.0.0 and above, because TimePicker is not used by everyone and removing it reduces the size of the main file by about 20%.",
    "Also, with the changes I made in this plugin, you can now use the time picker in multiple and range modes, which the main time picker did not have this feature.",
    "<a href='/other-pickers'>Here</a> are a few examples of how to use the TimePicker plugin, so instead of rewriting them here, I will add two examples of adding time picker in multiple and range modes."
  ],
  "multiple_time_picker": [
    "To use the TimePicker in multiple and range modes, it is better to use the DatePanel. This is because by clicking on any dates in the DatePanel, that date will be focused, and by clicking on each date, the time of that selected date can be changed sequentially.",
    "To determine which date is focused, you can use the <b>markFocused</b> property in the DatePanel."
  ],
  "focused": [
    "Clicking on any date in the DatePanel will focus on that date.",
    "You can use the <b>markFocused</b> prop to better determine which date is focused. Also, you can set a className for the focused date to further customize it."
  ],
  "date_panel_note": "The important thing about the onClickDate property is that if a date is clicked, the value of that date will be sent as an argument in onClickDate, but if the delete button is clicked, onClickDate will still be called but with an <b>undefined</b> argument.",
  "focus_event_1": [
    "The onFocusedDateChange property receives a function and calls it with two arguments (the first argument is dateFocused, and the second argument is dateClicked), which can be called by the Calendar itself or any of the plugins.",
    "The difference between when onFocusedDateChange is called by the Calendar itself and when it is called by one of the plugins is that in the first case the second argument (ie dateClicked) is always present, and in the second case the second argument is always undefined.",
    "The onFocusedDateChange property actually specifies two things."
  ],
  "focus_event_2": [
    "Which date is currently focused.",
    "Which date is currently clicked."
  ],
  "focus_event_3": [
    "The nature of the two is different from each other and is sent as two arguments to the listener you have specified.",
    "There are a few things to keep in mind about this property."
  ],
  "focus_event_4": [
    "Both of these arguments may have the same type (either DateObject or undefined)",
    "One of them may be DateObject and the other may be undefined."
  ],
  "focus_event_5": "Here I will describe the different conditions:",
  "focus_event_6": "Single & Range Modes:",
  "focus_event_7": [
    "Both arguments have the same type (DateObject).",
    "This means that the date focused is the same as the date clicked."
  ],
  "focus_event_8": "Multiple Mode:",
  "focus_event_9": "As long as the user is selecting new dates, both arguments have the same type (DateObject).",
  "focus_event_10": "This means that the date focused is the same as the date clicked.",
  "focus_event_11": "But as soon as the user clicks on the date that already selected, The selected date is deleted and one of the following cases may occur:",
  "focus_event_12": [
    "the date that is deleted is the same as the focused date, in which case the first argument (ie dateFocused) is undefined and the second argument (ie dateClicked) is the clicked date.",
    "the deleted date is not the same as the focused date, in which case the first argument is the previous focused date, and the second argument is the current deleted date."
  ],
  "focus_event_13": "DatePanel:",
  "focus_event_14": [
    "As a plugin, the second argument is always undefined.",
    "Clicking on any dates displayed on the DatePanel, will focus that date, so if you click on any date of DatePanel, the first argument (ie dateFocused) will be the same as the clicked date.",
    "If the user deletes an unfocused date through the dates panel, the first argument is the same as the previous focused date.",
    "If the user deletes a focused date through the dates panel, the first argument is also undefined."
  ],
  "default_analog_time_picker": [
    "Like the TimePicker plugin, the AnalogTimePicker can be used in single, multiple, and range modes.",
    "Here is an example of how to use an analog time picker in a single mode."
  ],
  "red_clock": [
    "To reduce the size of this plugin, I put each color in a separate CSS file.",
    "Therefore, to change the color of the analog clock in red, green, purple, etc., you must import the analog clock CSS file next to the original CSS color files, as in the example below."
  ],
  "add_subtract": [
    "Depending on the increase or decrease of time from the original moment, add or subtract methods can be used.",
    "So you have to pass two parameters of value and key to these methods.",
    "The type of value can be a number or string, and the type of key must be a string.",
    "All the keys that can be passed as the second parameter are listed in the table below."
  ],
  "add_subtract_1": "For example, to add 5 days to the present moment, you can do the following:",
  "add_subtract_2": "Subtracting 1 month from the above date",
  "add_subtract_3": "You can also do all these operations continuously:",
  "plugin_info": "The contents of this section are not yet complete and will be updated over time.",
  "plugins_doc": [
    "Here I want to write a brief description of how to build a plugin.",
    "Examples of plugins that I thought I needed are currently available on the site, but they certainly will not meet the needs of the majority, because everyone in different working conditions may need a plugin that I did not put by default. So it is necessary to give a brief tutorial on this, so that you do not need to read the source code of previous plugins.",
    "Plugins are actually the usual React component that are placed in the position specified by the user, except that a series of properties are sent to them by default.",
    "A description of these properties will be provided in a table in the future.",
    "For now, we want to write a simple React component and introduce it as a plugin to the Calendar:"
  ],
  "plugins_step_1": "As you can see, your plugin is displayed on the right side of the calendar like any other plugins.",
  "plugins_step_2": "For further testing, you can change the position of your plugin to the bottom.",
  "step_two": [
    "The position of the plugin varies depending on whether the day picker is enabled or not.",
    "For example, if plugins with different positions are entered into the calendar but the user activates the disableDayPicker property, the position of all plugins changes to the bottom.",
    "In this example we modify the above component to write its position and test it in both default and disableDayPicker modes:"
  ],
  "calendar_datepicker_props": [
    "Contain the HTML elements of the calendar and date picker, each of them is stored separately in its own ref.",
    "For example, because the closeCalendar function is in the DatePicker ref. it can be used to closing the calendar from your plugin.",
    "Just note that if the user uses your plugin in the Calendar instead of DatePicker, the DatePicker and datePickerProps will be undefined."
  ],
  "calendar_props_datepicker_props": [
    "The point about these two properties is that the value of datePickerProps always takes precedence over the value of calendarProps. Because DatePicker changes some props of Calendar.",
    "To determine whether you should use calendarProps or datePickerProps, it is better to follow the example below:"
  ],
  "state_prop": [
    "An object that contains the data that is required by the calendar.",
    "The properties of this object are written in the table below.",
    "Note that the <b>type</b> of any of these properties should not be changed."
  ],
  "read_only_calendar": "Both readOnly and disabled props prevent the user from selecting a new date, except that in readOnly mode, the calendar header remains active, but in disabled mode, the calendar header is also disabled.",
  "time_picker_style": "If you prefer to use the time picker on the right or left side of the calendar, you can use the style property to change its width.",
  "tooltip": "A little trick to add a custom tooltip.",
  "children": "By using the children property, you can replace the desired 'value' or 'component' with the default value (day number).",
  "time_picker_position_right": "If you do not want to use the date panel, you can use the time picker with the default position, then you can use the internal select to change the focused date.",
  "time_picker_format_prop": [
    "If the calendar is in multiple or range mode, and the time picker position is right or left, a select with the default format (YYYY/MM/DD) will be added to the time picker.",
    "So, you can change the format of the select with this prop."
  ],
  "calendar_descriptions_v3": [
    "This package uses the Gregorian calendar and English locale by default, so if you want to use the default calendar and locale, you do not need to import anything else, but to use other calendars and locales, you must import them separately.",
    "Calendars and locales are stored inside the react-date-object package, which is installed with this package.",
    "The following two tables list all the calendars and locales that can be used, along with their pathes, and below them, are examples of how to import each of them."
  ],
  "import_calendar_descriptions": "All calendar files in DateObject are placed in the calendars folder, so use this rule to import any of them:",
  "import_calendar_descriptions_1": "The table below lists all the calendars along with the import path:",
  "jalali_description": "Due to the use of conventional calculations in the Jalali calendar, converting a date to a Jalali calendar from other calendars may differ by one day compared to the Persian (solar Hijri) calendar.",
  "lunar_hijri_description": "Conventional Hijri Lunar Calendar. (due to the use of contract calculations, 1 and a maximum of 2 days may be different with the Astronomical Lunar Hijri Calendar)",
  "locales_v3": [
    "The convention for importing locales is the same as the calendars, except that you should use the locales folder instead of the calendars folder.",
    "because each calendar has its own locale files, this is how to name the files in the locales folder: 'calendar_locale'.",
    "For example, if you want to use the Gregorian calendar in Farsi locale, you need to use the gregorian_fa file, and if you want to use the Persian calendar and the Farsi locale, you must import the persian_fa file."
  ],
  "import_examples": "Below are some examples of importing different calendars and locales.",
  "calendars_v2": "If you are using versions before 3.0.0, click on link below to see how to enter the calendar and locales.",
  "date_object_v2": "If you are using versions before 3.0.0, click on link below to see how to use DateObject.",
  "other_calendars": [
    "To use any calendar other than the default calendar, you must first import the calendar and the locale of that calendar.",
    "Importing a calendar is required, but in the case of locale, it depends on what you want to do with the date. For example, if formatting the date in locale letters is not important to you, or you do not want to format the names of the months and days of the week, you can use the same default locale (gregorian_en), but remember that if you format the first month of each calendar with the default locale ( passing MMMM as a parameter to format method), it returns you 'January', which is actually the first month of the default locale (gregorian_en)! But if you format the month number (passing MM as a parameter in the format method) in all locales, ​​you get the same value which is '01'.",
    "So if you want to format the date produced in your favorite calendar in its own locale, you will also need to import that locale too.",
    "Below are some examples of dates in different calendars and locales.",
    "Click on the links below to see the table of all calendars and locales."
  ],
  "persian_calendar_farsi_locale": "To generate the solar Hijri date in the Farsi locale, you must import the persian calendar and persian_fa locale as in the example below:",
  "convert": [
    "There are many ways to convert dates to each other, but the best one is the convert method.",
    "The convert method needs two parameters, the first one is required and the second one is optional.",
    "The first parameter is actually the calendar you want to convert the current date to, and the second one is the locale of that calendar.",
    "my advice is to enter the second parameter as well if you want to correctly format the name of the month (MMMM) or day of the week (dddd).",
    "If you want to convert any date other than the Gregorian (for example, Solar Hijri) to the Gregorian calendar, you can leave both parameters empty.",
    "Here are some examples of how to convert dates:"
  ],
  "gregorian_to_persian": [
    "In general, to convert two dates to each other, you must do these two steps:",
    "One: generating a date in the current calendar (which is here Gregorian)",
    "Two: Convert the current date to the target calendar (which is Persian)",
    "You can do these two steps separately or continuously, both of which are given in the example below:"
  ],
  "gregorian_to_persian_first": "The first case, separately:",
  "gregorian_to_persian_second": "second case, continuously:",
  "persian_to_arabic": "To convert the Solar Hijri date to Lunar Hijri, you need to import the Persian calendar, Arabic calendar, and arabic locale (arabic_en used here):",
  "locales_description": [
    "There are several ways to enter a locale to the DatePicker.",
    "1- Using months, weekDays, and digits props.",
    "2- Importing the locale from the date-object package and entering it into the locale prop.",
    "3- Creating a local object and pass it into the locale prop.",
    "Except for the second way where the locale object is imported outside the main component, for the first and third ways, as far as possible, define your locale object or arrays outside the main component to avoid running internal date picker effects when the main component is rerendered."
  ],
  "locale_comment": "It is better to put this array outside the main component.",
  "custom_locale": [
    "If none of the above examples works, you can create your own custom locale.",
    "The best way to create a custom locale is to opening the <a target='_blank' href='https://github.com/shahabyazdi/date-object/tree/master/locales/cjs'>locale folder in the date-object repository</a>, download the English locale for the calendar you want, and then modify it as you wish.",
    "All properties in the locale object are required, and deleting any of them will cause the calendar to malfunction. so if you don't want to modify a property, instead of deleting it, leave it as it is.",
    "The convention for naming a local object is: 'name of the calendar_name of the locale' (e.g gregorian_en for Gregorian calendar and English locale), and also the value of the name property in the locale object must be the same as the name of the locale file.",
    "In case you modify the locale file for a specific language, you can send a pull request to the <a target='_blank' href='https://github.com/shahabyazdi/date-object/'>date-object repository</a> so that others can use it.",
    "For example, I copied the <a target='_blank' href='https://github.com/shahabyazdi/date-object/blob/master/locales/cjs/gregorian_en.js'>gregorian_en</a> file from here, and change all its values ​​to lowercase."
  ],
  "types_v2": [
    "The type prop is deprecated. However, I put its components in a separate file so you can import and use them with render prop if you want.",
    "When you are using a custom component, instead of entering properties such as id, name, required, placeholder, etc. into the date picker, enter them directly into your custom component.",
    "Below are examples of how to import and render the internal components, as well as how to render your custom component.",
    "<strong>If you are using versions before 3.0.0, click on the link below to view the documentation.</strong>"
  ],
  "custom_calendar": [
    "By using the method I explain below, you can create most of the 12-month calendars for your date picker.",
    "Unfortunately, the 13-month calendars (such as the Chinese or Hebrew calendars, which have 13 months in the leap year) are not currently supported.",
    "In the following, I will explain how to create a Thai calendar for the date picker.",
    "The reason for choosing the Thai calendar is that it is very similar to the Gregorian calendar. In fact, the Thai calendar is <a target='_blank' href='https://en.wikipedia.org/wiki/Thai_solar_calendar'>543 years ahead of the Gregorian calendar</a>.",
    "To create a calendar, first, go to the <a target='_blank' href='https://github.com/shahabyazdi/date-object/tree/master/calendars/cjs'>calendars folder</a> in the date-object repository, download the <a target='_blank' href='https://raw.githubusercontent.com/shahabyazdi/date-object/master/calendars/cjs/gregorian.js'>gregorian.js</a> file, and save it to your local directory.",
    "Try to match the file name with the name of your favorite calendar, as well as with the name property in the calendar object. Also, note that all properties in the calendar object are required, and deleting any of them will cause the calendar to malfunction. so if you don't want to modify a property, instead of deleting it, leave it as it is.",
    "For example, I downloaded the gregorian.js file and saved it as thai.js:"
  ],
  "custom_calendar_1": [
    "As I said, because of the similarity between the Thai calendar and the Gregorian calendar, we only need to change the value of <strong>epoch</strong> and <strong>century</strong> properties in the calendar object.",
    "The epoch property is actually the distance between the number of days on the first day of the calendar and <a target='_blank' href='https://en.wikipedia.org/wiki/Julian_day'>Julian Day Number</a>, to caclulate it, you must first obtain the Julian Day Number and then, subtract it from the number of days in the current calendar.",
    "You can use DateObject to get the current Julian Day Number:"
  ],
  "custom_calendar_2": "Given that we know that the Thai calendar is 543 years ahead of the Gregorian calendar, to get the number of days in the Thai calendar, we can add 543 years to the Gregorian calendar, and by using the toDays() method, we can get the number of days compared to 01/01/01:",
  "custom_calendar_3": "Now by subtracting these two values from each other, the epoch value is obtained:",
  "custom_calendar_4": "By substituting epoch and century values, our calendar object changes as follows:",
  "custom_calendar_5": "So far, if we import our created calendar and enter it into the date picker, we should see this result:",
  "custom_calendar_6": "If you need, you can create a Thai locale and enter it into the calendar by using the <a target='_blank' href='../locales/#custom-locale'>tutorial</a> provided here:",
  "custom_calendar_7": "Finally, by entering our calendar and locale into the Calendar Component, this result is achieved:",
  "month": "Month",
  "year": "Year",
  "multiple_range_picker": [
    "The Multiple Range mode is a way for selecting multiple date ranges and the codes provided below show how to do it using the useState hook to manage the selected date ranges. ",
    "The initially selected date ranges are passed to the Calendar component using the value prop, while the onChange function is used to update the selected date ranges whenever the user selects a new range.",
    "In this example, the values state variable is initialized with three selected date ranges. Each range is represented as an array of two DateObject instances that specify the start and end dates of the range. The Calendar component is used to display the calendar and handle user input. The value prop is set to the values state variable, which specifies the initially selected date ranges. The onChange prop is set to the setValues function, which is used to update the values state variable whenever the user selects a new date range. The multiple props are set to true, which allows the user to select multiple dates. The range prop is also set to true, which enables the user to select a range of dates within a single selection. In summary, the Multiple Range mode is useful for selecting multiple date ranges in a calendar or date picker."
  ],
  "multiple_range_month_picker": [
    "The onlyMonthPicker feature in a date picker or calendar allows users to select only months, without selecting a specific day. When the multiple and range props are added, users can select multiple ranges of months.",
    "The provided code shows how to use the DatePicker component in React with the onlyMonthPicker, multiple, and range props.",
    "The DatePicker component is used to display the calendar and handle user input. The onlyMonthPicker prop restricts the user's selection to months only, while the multiple and range props allow the user to select multiple ranges of months.",
    "In summary, the onlyMonthPicker feature in a date picker allows users to select only months, without selecting a specific day. When used with the multiple and range props, users can select multiple ranges of months. This is a useful feature when working with date ranges in a month-only context."
  ],
  "multiple_range_year_picker": [
    "The onlyYearPicker feature in a date picker or calendar allows users to select only years, without selecting a specific day or month. When the multiple and range props are added, users can select multiple ranges of years.",
    "The provided code shows how to use the DatePicker component in React with the onlyYearPicker, multiple, and range props."
  ],
  "validating_single_date": [
    "Starting from version 4, date validation can be performed using the second parameter passed to the onChange method. This parameter is an object containing the following properties:",
    "isTyping",
    "input",
    "validatedValue",
    "The isTyping property indicates whether the onChange method was called due to the user typing or not. If it is true, it means that the method was called as a result of the user typing in the input field. If it is false, it means that the method was called due to date selection from the calendar component.",
    "The input property is a reference to the input element. If you are not using a custom input, the input value is equal to the internal input reference of the date picker (HTMLInputElement). If you are using a custom input, it is equal to a div that contains your custom component (HTMLDivElement).",
    "The validatedValue property is a string that represents the value to be displayed in the input field.",
    "It is important to note that returning false from the onChange method will prevent the internal state of the date picker from being set. Therefore, if you consider the input date to be invalid, you should return false."
  ],
  "validation_multiple_range": [
    "This example demonstrates how to validate a range of dates in the DatePicker component. In this example, the goal is to reserve a room for a certain date range. The Calendar component is used with multiple and range props to allow selecting multiple ranges of dates. The initial values for reserved and in-service dates are defined in two arrays named reserved and inService.",
    "The isReserved and isInService functions check whether a given date falls within the reserved or in-service ranges.",
    "The mapDays prop is used to apply a class to the date elements to indicate whether they are reserved or in-service."
  ],
  "multiple_date_separator": "the default value of dateSeparator prop in multiple mode is ', '",
  "range_date_separator": "the default value of dateSeparator prop in range mode is ' ~ '",
  "multiple_range_date_separator": "the default value of multipleRangeSeparator prop is ','",
  "header_order": [
    "The header of the Calendar component can be arranged in a specific order using the headerOrder prop. The headerOrder prop should be an array containing one or more of the following values:",
    "RIGHT_BUTTON: A button that appears on the right side of the header. This button is typically used for navigating to the next month or year.",
    "MONTH_YEAR: A display of the current month and year in the center of the header. This element is typically used to provide context for the calendar.",
    "YEAR_MONTH: A display of the current year and month in the center of the header. This element is similar to MONTH_YEAR, but with the year displayed before the month.",
    "LEFT_BUTTON: A button that appears on the left side of the header. This button is typically used for navigating to the previous month or year.",
    "The default value of headerOrder is ['LEFT_BUTTON', 'MONTH_YEAR', 'RIGHT_BUTTON'], which arranges the header elements in a typical order for a calendar.",
    "To customize the order of the header elements, pass an array of the desired element names to the headerOrder prop. For example, to display the MONTH_YEAR element first, followed by the LEFT_BUTTON and RIGHT_BUTTON buttons, you could use the following code:"
  ],
  "month_year_separator": [
    "The monthYearSeparator prop is used to specify the character that appears between the month and year elements in the Calendar header. By default, the monthYearSeparator value is ', '",
    "To add a separator character, pass a string value to the monthYearSeparator prop. For example, to use a vertical bar (|) as the separator, you can use the following code:"
  ],
  "custom_multiple": "<b>Node</b>: In versions before 4, you should use <b>openCalendar</b> prop instead of onFocus.",
  "step_time_picker": "The default step for the hour, minute, and second in the time picker is 1. However, if you wish to change the default value, you can set it using the hStep, mStep, and sStep properties. These properties can be modified to meet your specific requirements. Please ensure that the values for hStep, mStep, and sStep are of the number data type."
}
